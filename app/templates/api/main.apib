FORMAT: 1A
HOST: https://api.tuneefy.com

The tuneefy API
===
Welcome to the **tuneefy** API. This API provides access to the **tuneefy.com** service and exposes endpoints to search and aggregate music links.


<br>
## Notational Conventions

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119](https://www.ietf.org/rfc/rfc2119).


<br>
## Representation of Date and Time

All exchange of date and time-related data, if applicable, MUST be done according to **ISO 8601** standard and stored in UTC.

When returning date and time-related data, the `YYYY-MM-DDThh:mm:ss.SSSZ` format MUST be used.



<br>
## Authentication

The API endpoints require an OAuth access token. The token is necessary to authenticate **all** requests to the API.

<br>
### OAuth

The tuneefy API currently supports the [OAuth 2 draft](https://oauth.net/2/) specification. All OAuth2 requests MUST use the SSL endpoint available at https://api.tuneefy.com/.

OAuth 2.0 is a simple and secure authentication mechanism. It allows applications to acquire an access token for tuneefy via a POST request to a token endpoint. Authentication with OAuth can be accomplished in the following steps:

  1. Register for an API key by sending a mail to api@tuneefy.com
  2. Exchange your customer id and secret for an access token
  3. Make requests by passing the token in the Authorization header
  4. When your token expires, you can get a new one 

<br>
### Getting an authorization token

Use the `/auth/token` endpoint to get a valid token. You will need your consumer key and secret.

> The only accepted grant type is `client_credentials`. See further down for more info.

<br>
### Passing the authorization token

You can either use the **Authorization** header, as such :

```http
Authorization: bearer 5262d64b892e8d4341000001
```

Or you can pass the `access_token` parameter with all your requests.

```http
GET test?access_token=5262d64b892e8d4341000001
```

The header method is RECOMMENDED.


::: note
## In short

* This API uses OAuth2 for authentication
* A token MUST be retrieved from the authentication endpoint before issuing any request
* Token MUST be provided in a `Authorization` header, or via the `access_token` parameter
* Token MUST be provided for each request
:::



<br>
## Pagination

The API can limit the number of results returned (for `search` and `aggregate` methods) via the `limit` parameter.

This is not _strictly speaking_ pagination since there is no way to pass an offset to the API to retrieve the subsequent results, are they are fetched from different platforms that do not all support pagination.



<br>
## Response format

This API uses the `Accept` header to identify the data type it should return.

```http
Accept: application/json
```

This header SHOULD be present in every request. If not, the API will use the default response format.

Alternatively, all API methods support an optional return format parameter `format=json`. Note that **json** is the default response format, but **xml** and **html** are also available.

| Return type |        Accept header       | format parameter |
|-------------|----------------------------|--------------------|
| JSON        | `Accept: application/json` | `format=json`      |
| XML         | `Accept: application/xml`  | `format=xml`       |
| XML (alt)   | `Accept: text/xml`         | `format=xml`       |
| HTML        | `Accept: text/html`        | `format=html`      |


::: note
## Info
The API does *not* support **JSONP**.
:::





<br>
## Status Codes and Errors

This API uses HTTP status codes to communicate with the API consumer.

+ `200 OK` - Response to a successful GET or POST.
+ `400 Bad Request` - Malformed request; form validation errors.
+ `401 Unauthorized` - When no or invalid authentication details are provided.
+ `404 Not Found` - When a non-existent resource is requested.
+ `405 Method Not Allowed` - Method not allowed.
+ `406 Not Acceptable` - Could not satisfy the request Accept header.





<br>
## Error response

This API returns both machine-readable error codes and human-readable error messages in response body when an error is encountered.




# Data Structures

## Platform

- name: `Deezer` (string)
- type: `streaming` (string)
- homepage: `https://www.deezer.com/` (string)
- tag: `deezer` (string)
- mainAccentColor: `181818` (string)
- enabled (object)
    + api: `true` (boolean)
    + website: `true` (boolean)
- capabilities (object)
    + track_search: `true` (boolean)
    + album_search: `true` (boolean)
    + lookup: `true` (boolean)


## OAuth valid response (object)
+ `access_token`: `5262d64b892e8d4341000001` (string) - valid Token
+ `scope`: all (string) - scopes of current token
+ `expires_in`: 3600 (number)
+ `token_type`: Bearer (string)


## Platform Result
+ musical_entity (Musical Entity)
+ metadata (object)
  + score: 0.97 (number)
  + merges: 1 (number, optional)
+ share (object)
  + intent: `590c6c8320b1b` (string)
      
## Musical Entity

+ type: `track` (string)
+ title: `Karma Police` (string)
+ album (object)
  + title: `OK Computer` (string)
  + artist: `Radiohead` (string)
  + picture: `https://api.deezer.com/album/14879699/image` (string)
  + safe_title: `OK Computer` (string)
  + extra_info (object)
    + is_cover: `false` (boolean)
    + is_remix: `false` (boolean)
    + acoustic: `false` (boolean)
    + context (array[string])
        + `Deluxe Edition`
+ links (object)
  + deezer (array[string])
      + `http\://www.deezer.com/track/138539981`
+ safe_title: `Karma Police` (string)
+ extra_info (object)
  + is_cover: `false` (boolean)
  + is_remix: `false` (boolean)
  + acoustic: `false` (boolean)
  + context (array[string])



# Group Authentication

## OAuth Access token [/auth/token]

A valid token MUST be provided for each request that requires authentication.

### Get an access token [POST]

Allows to retrieve a valid OAuth token for your application, using the application consumer key and secret.

> This endpoint is not protected

+ Request Get a token
    + Body

            {
                "client_id": "Your application customer key",
                "client_secret": "Your application customer secret",
                "grant_type": "client_credentials"
            }

+ Response 200 (application/json)
    + Attributes (OAuth valid response)

+ Response 400 (application/json)

    + Body

            {
                TODO FIXME
            }





# Group Platforms

## Platforms list [/platforms{?type}]

### Retrieve all Platforms [GET]
Retrieves the list of available **Platforms**

**List of available types**

| Type | Underlying interface |
| --- | ---- |
| `streaming` | [Platform\WebStreamingPlatformInterface](https://github.com/tchapi/tuneefy2/blob/master/src/tuneefy/Platform/WebStreamingPlatformInterface.php)  |
| `store` | [Platform\WebStoreInterface](https://github.com/tchapi/tuneefy2/blob/master/src/tuneefy/Platform/WebStoreInterface.php)  |
| `scrobbling` | [Platform\ScrobblingPlatformInterface](https://github.com/tchapi/tuneefy2/blob/master/src/tuneefy/Platform/ScrobblingPlatformInterface.php)  |

+ Parameters
    + type: `streaming` (optional, string) ... The type of platform to retrieve

+ Request Valid Authentication

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Attributes (object)
        - platforms (array[Platform])

+ Response 404 (application/json)

    + Body

            {
                "errors": ["This platform type does not exist"],
                "code": 404
            }

+ Request Invalid token

    + Headers

            Accept: "application/json"
            Authorization: "Bearer invalid_token"

+ Response 401 (application/json)

    + Body

            {
                "errors": ["Not authorized"],
                "code": 401
            }

## Platform detail [/platform/{tag}]

### Retrieve a Platform [GET]
Retrieves a specific **Platform** and its details

> See `/platforms` to get a list of all available platforms

+ Parameters
    + tag: `deezer` (required, string) ... The tag of the platform to retrieve

+ Request Example

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Attributes (Platform)

+ Response 404 (application/json)

    + Body

            {
                "errors": ["This platform does not exist"],
                "code": 404
            }




# Group Search

## Search [/search/{type}/{tag}{?q}]

### Search a specific platform [GET]
Search for tracks or albums on a specific platform

**Capabilities**

To be able to search on a platform, the platform must have the **track\_search** or **album\_search** capability.

> Don't forget to url-encode the query (`q`) if necessary

+ Parameters
    + type: `track` (required, string) ... The type of musical entity to search for. Can be **track** or **album** for now.
    + tag: `deezer` (required, string) ... The tag of the platform to search on
    + q: `ok+computer` (required, string) ... The text to search for

+ Request Track
    + Parameters
        + type: `track` 
        + tag: `deezer` 
        + q: `ok+computer`

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Attributes (object)
        + results (array[Musical Entity])
    

+ Request Album
    + Parameters
        + type: `album` 
        + tag: `deezer` 
        + q: `ok+computer`

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Attributes (object)
        + results (array[Platform Result])
    
+ Request Without `q` parameter

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Body

            {
                "errors": ["Missing or empty parameter : q (query)"],
                "code": 400
            }

## Lookup [/lookup{?q}]

### Lookup a permalink [GET]
Lookup a permalink to retrieve the info about the track or album

**Capabilities**

To be able to lookup on a platform, the platform must have the **lookup** capability.


+ Parameters
    + q: `https://open.spotify.com/track/6IWxHgVbdKyUMydhVGXRaT` (required, string) ... The permalink to search for

+ Request Example

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Attributes (object)
        + result (object)
            * musical_entity (object)
                * type: `track` (string)
                * title: `On The Road Again` (string)
                * album (object)
                  * title: `The Best Of Canned Heat` (string)
                  * artist: `Canned Heat` (string)
                  * picture: `https://i.scdn.co/image/b83f79c17a44a9aa24a49748d489c52d80c36fb5` (string)
                  * safe_title: `The Best Of Canned Heat` (string)
                  * extra_info (object)
                    * is_cover: `false` (boolean)
                    * is_remix: `false` (boolean)
                    * acoustic: `false` (boolean)
                    * context (array[string])
                * links (object)
                  * spotify (array[string])
                      * `https://open.spotify.com/track/6IWxHgVbdKyUMydhVGXRaT`
                * safe_title: `On The Road Again` (string)
                * extra_info (object)
                  * is_cover: `false` (boolean)
                  * is_remix: `false` (boolean)
                  * acoustic: `false` (boolean)
                  * context (array[string])
            * metadata (object)
                * query_words (array[string])
                    - `Canned Heat`
                    - `On The Road Again`
                * platform: `Spotify` (string)
            * share (object)
                * intent: `590c6c8320b1b` (string)
                    

## Aggregate [/aggregate/{type}{?q}]

### Search on multiple platforms at once [GET]
Search for tracks or albums on multiple platforms


+ Parameters
    + type: `track` (required, string) ... The type of musical entity to search for. Can be **track** or **album** for now.
    + q: `ok+computer` (required, string) ... The text to search for

+ Request Example

    + Headers

            Accept: "application/json"
            Authorization: "Bearer 5262d64b892e8d4341000001"

+ Response 200 (application/json)

    + Attributes (object)
        + results (array[Platform Result])
    


